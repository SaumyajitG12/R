ds
str(cars)
ds1 <- read.csv("breast-cancer-wisconsin.names",header=F,skip = 105,sep = " ")
ds1
ds <- read.csv("breast-cancer-wisconsin.data",header=F)
ds
ds1[c(11,13),4]
ds1[c(-8)]
ds1[c(-8),5]
ds1[,5][c(-8)]
ds1[1:10,5][c(-8)]
ds1 <- read.csv("breast-cancer-wisconsin.names",header=F,skip = 105,sep = " ")
ds1
ds <- read.csv("breast-cancer-wisconsin.data",header=F)
ds
colnames(ds) <- append(ds1[1:10,5][c(-8)],ds1[c(11,13),4])
ds
colnames(ds) <- append(ds1[1:10,5][c(-8)],ds1[c(11,13),4])[11][1:5]
ds
ds1 <- read.csv("breast-cancer-wisconsin.names",header=F,skip = 105,sep = " ")
ds <- read.csv("breast-cancer-wisconsin.data",header=F)
colnames(ds) <- append(ds1[1:10,5][c(-8)],ds1[c(11,13),4])
ds
cars <- read.csv("Cars93.csv",stringsAsFactors = T)
str(cars)
View(cars)
table(cars$Price.Category, cars$Type)
cars <- read.csv("Cars93.csv",stringsAsFactors = F)
str(cars)
View(cars)
table(cars$Price.Category, cars$Type)
sum(cars$Price.Category=="15 to 30")
cars <- read.csv("Cars93.csv",stringsAsFactors = T)
str(cars)
View(cars)
table(cars$Price.Category, cars$Type)
sum(cars$Price.Category=="15 to 30")
ds1 <- read.csv("breast-cancer-wisconsin.names",header=F,skip = 105,sep = " ")
ds <- read.csv("breast-cancer-wisconsin.data",header=F)
colnames(ds) <- append(ds1[1:10,5][c(-8)],ds1[c(11,13),4])
ds
cars <- read.csv("Cars93.csv",stringsAsFactors = T)
str(cars)
View(cars)
table(cars$Price.Category, cars$Type)
sum(cars$Price.Category=="15 to 30")
unique(cars$Price.Category)
cars <- read.csv("Cars93.csv",stringsAsFactors = F)
unique(cars$Price.Category)
cars <- read.csv("Cars93.csv",stringsAsFactors = T)
cars <- read.csv("Cars93.csv",stringsAsFactors = T)
str(cars)
View(cars)
table(cars$Price.Category, cars$Type)
sum(cars$Price.Category=="15 to 30")
unique(cars$Price.Category)
table(cars$Price.Category, cars$Type, cars$Origin) #with filter
#addmargins
addmargins(table(cars$Price.Category, cars$Type))
a <- c(34,90,21,79)
sum(a)
a/sum(a)
prop(a) #Function to get the proportions
prop.table(a) #Function to get the proportions
table(a)
prop.table(table(cars$Price.Category, cars$Type))
prop.table(table(cars$Price.Category))
prop.table(table(cars$Price.Category))*100
prop.table(table(cars$Price.Category,cars$Type))
prop.table(table(cars$Price.Category,cars$Type))*100
prop.table(table(cars$Price.Category))
prop.table(table(cars$Price.Category))*100 #Percentage
prop.table(table(cars$Price.Category,cars$Type))
prop.table(table(cars$Price.Category,cars$Type))*100 #percentage
prop.table(table(cars$Price.Category,cars$Type,cars$Origin))
survery <- read.csv("survey.csv",stringsAsFactors = T)
table(survery$Sex)
table(survery$Sex, useNA = "ifany") #Frequency table ignores missing value, so we use useNA tag
View(survery)
table(survery$Sex, useNA = "ifany") #Frequency table ignores missing value, so we use useNA tag
ifelse(cars$Price>50,aff="EXPENSIVE",no="NOT")
aff <- ifelse(cars$Price>50,"EXPENSIVE","NOT")
aff
aff <- ifelse(cars$Price>50,"EXPENSIVE","NOT EXPENSIVE")
aff
aff <- ifelse(cars$Price>30,"EXPENSIVE","NOT EXPENSIVE")
aff
aff <- ifelse(cars$Price>30,"Expensive","Affordable")
aff
#If we want to bind it to a new column in cars(cars93)
cars$Affordability <- ifelse(cars$Price>30,"Expensive","Affordable")
View(cars)
cars$Affordability <- ifelse(cars$Price>30,"Expensive","Affordable")
View(cars)
table(cars$Affordability)
cars1 <- cbind(cars[,1:5],aff,cars[,6:]
cars1 <- cbind(cars[,1:5],aff,cars[,6]
cars1
cars1 <- cbind(cars[,1:5],aff,cars[,6:])
mean(survery$Pulse)
str(survery$Pulse)
cars[,1:5]
aff
cars[,6:]
median(survery$Pulse)
median(survery$Pulse,na.rm = T)
cars1 <- cbind(cars[,1:5],aff,cars[,6:col28])
cars1 <- cbind(cars[,1:5],aff,cars[,6:28])
cars1
View(cars1)
View(cars1)
a <- seq(2,32,by=2)
quantile(a)
quantile(survery$Pulse, na.rm = T)
#If we want to find specific percentile we can use probs flag
quantile(survery$Pulse, na.rm = T, probs=0.6)
#Summary function gives you mean max quartile median and the NA's
summary(survery$Pulse)
#Summary function gives you mean max quartile median and the NA's
summary(survery$Pulse)[1:3]
attach(survery)
mean(Pulse, na.rm = T)
#Use detach to make surveys's components invisible again
detach(survery)
mean(Pulse, na.rm = T)
summary(survery$Pulse)
#Function, custom
add <- function(a,b,c){
ans <- a+b+c
return ans
m_to_k <- function(m){
kms <- m/1000
kms
}
m_to_k(25000)
add <- function(a,b,c){
ans <- a+b+c
return ans
add <- function(a,b,c){
ans <- a+b+c
ans
}
add(2,4,5)
add <- function(a,b,c){
ans <- a+b+c
return
}
add(2,4,5)
add <- function(a,b,c){
ans <- a+b+c
return ans
add <- function(a,b,c){
ans <- a+b+c
return(ans)
}
add(2,4,5)
b <- m_to_k(25000)
b
Fahrenheit_to_C <- function(f) {
c <- (f-32)*(5/9)
c
}
Fahrenheit_to_C(100)
sd(4)
sd(2,4,5,6)
sd(2,4)
#2nd
cars93 <- read.csv("Cars93.csv")
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
c <- sd(cars93$Price,rm.na=T)
c <- sd(cars93$Price,na.rm=T)
c
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
Coef_Var <- function(c1) {
c <- sd(c1$Price,na.rm=T)/mean(cars93$Price,na.rm=T)
c <- c*100
c
}
Coef_Var(cars93)
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
Coef_Var <- function(c1) {
c <- sd(c1,na.rm=T)/mean(cars93,na.rm=T)
c <- c*100
c
}
Coef_Var(cars93$Min.Price)
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
Coef_Var <- function(c1) {
c <- sd(c1,na.rm=T)/mean(cars93,na.rm=T)
c <- c*100
c
}
Coef_Var(cars93$Price)
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
Coef_Var <- function(c1) {
c <- sd(c1$,na.rm=T)/mean(c1,na.rm=T)
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
Coef_Var <- function(c1) {
c <- sd(c1,na.rm=T)/mean(c1,na.rm=T)
c <- c*100
c
}
Coef_Var(cars93$Price)
#3rd
x <- c(9.34,8.24,NA,1.345,0.56,0,NA,7.89)
m <- mean(x)
y <- ifelse(x==is.na(),mean(x),x)
y <- ifelse(x=is.na(),mean(x),x)
y <- ifelse(x=is.na(),m,x)
y <- ifelse(is.na(x),m,x)
y
m
m_in <- function(x) {
m <- mean(x,rm.na=T)
y <- ifelse(is.na(x),m,x)
y
}
#3rd
g <- c(9.34,8.24,NA,1.345,0.56,0,NA,7.89)
m_in(g)
m
mean(x,rm.na=T)
mean(g,rm.na=T)
m_in <- function(x) {
m <- mean(x,na.rm=T)
y <- ifelse(is.na(x),m,x)
y
}
m_in(g)
mean_impute <- function(x) {
m <- mean(x,na.rm=T)
y <- ifelse(is.na(x),m,x)
y
}
m_in(g)
mean_impute(survery$Pulse)
far_cel <- fucntion(f){
far_cel <- function(f) {
c <- (f-32)*(5/9)
c
}
far_cel(120)
coe_var <- function(g){
c <- sd(g)
s <- mean(g)
d <- (c/s)
d
}
coe_var(cars93$Price)
coe_var <- function(g){
c <- sd(g)
s <- mean(g)
d <- (c/s)*100
d
}
coe_var(cars93$Price)
mean_impute <- function(x) {
m <- mean(x,na.rm=T)
y <- ifelse(is.na(x),m,x)
list(imputed=y, mean=m)
}
mean_impute(survery$Pulse)
res <- mean_impute(survery$Pulse)
res$imputed
res$mean
cdt <- "2022-11-05"
class(cdt)
dt <- as.Date(cdt)
dt
class(dt)
cdt
cdt2 <- "2022-10-31"
dt2 <- as.Date(cdt2)
class(dt2)
dt2-dt1
dt2-dt
dt-dt2
unclass(dt)
unclass(d2)
unclass(dt2)
dt3 <- as.Date("1947-08-15")
dt3
unclass(dt3)
dt4 <- as.Date("1970-01-01")
dt4
unclass(dt4
dt4 <- as.Date("1970-01-01")
dt4 <- as.Date("1970-01-01")
dt4
unclass(dt4)
dt4 <- as.Date("1970-01-01")
dt4
unclass(dt4)
cdt2 <- "2022-10-31"
dt2 <- as.Date(cdt2)
class(dt2)
unclass(dt3)
unclass(dt4)
dt4 <- as.Date("1970-01-01")
dt4
unclass(dt4)
unclass("1990-12-05")
unclass(dt3)
unclass(as.Date("1990-12-05"))
unclass(as.Date("1990-04-17"))
unclass(as.Date("2000-04-17"))
Sys.Date()
class(Sys.Date())
cdt1 <- "12-Jan-2022"
dt1 <- as.Date(cdt1,format="%d-%b-%Y")
dt1
cdt2 <- "31-March-2022"
dt2 <- as.Date(cdt1,format="%d-%B-%Y")
dt2
dt2 <- as.Date(cdt2,format="%d-%B-%Y")
dt2
cdt5 <- "Monday, 10 October 2022"
dt5 <- as.Date(cdt5,format="%A, %d %B %Y")
dt5
dt3+5
dt5+5
dft <- "20, October 2015 13:30:43"
dfy <- strptime(dft,"%d, %B %Y %H:%M:%S")
dfy
class(dfy)
#There is a function called format which converts date back into character
new <- format(dt5, "%A, %d %B %Y")
new
dft <- "20 October 2015 13:30:43"
dfy <- strptime(dft,"%d %B %Y %H:%M:%S")
dfy
seq(from=Sys.Date(), length=10, by='week')
dt1 <- Sys.time()#Current sys time
dt1
class(dt1)
unclass(dt1)
dt <- as.POSIXlt(dt1)
unclass(dt1)
unclass(dt)
library(lubridare)
library(lubridate)
library(lubridate)
install.packages("lubridate")
cdt1 <- "12-Jan-2022"
dt1 <- dmy(cdt1)
library(lubridate)
dt1 <- dmy(cdt1)
dt1
cdt2 <- "03-31-2022"
dt1 <- mdy(cdt2)
dt1
dt <- "20, Feb 2015 13:40:32"
dt_prn <- parse_date_time(dt, "dmy_HMS")
class(dt_prn)
dt_prn
cdt <- c("12-Nov-2022", "15-Jun-2022","29-Sep-2022")
dt <- dmy(cdt)
d <-day(dt)
d
month(dt)
year(dt)
wday(dt)
wday(dt,label=T) #The label makes the Output give the full name of the day of the week
d <-day(dt)
d
month(dt)
year(dt)
wday(dt)
wday(dt,label=T)
dt+1
month(dt) <- month(dt)+1
month(dt)
dt
Orders <- read.csv("Orders.csv.csv",stringsAsFactors = T)
Orders <- read.csv("Orders.csv",stringsAsFactors = T)
View(Orders)
View(Orders)
dt1 <- dmy(Orders$Order.Date)
dt1
d <- day(dt1)
m <- month(dt1)
y <- year(dt1)
y <- year(dt1)
y
Orders <- cbind(Orders,d,m,y)
Orders
date <- day(dt1)
month <- month(dt1)
year <- year(dt1)
Orders <- cbind(Orders,d,m,y)
View(Orders)
View(Orders)
Orders <- cbind(Orders,date,month,year)
str(Orders)
Day <- day(dt1)
Month <- month(dt1)
Year <- year(dt1)
Orders <- cbind(Orders,date,month,year)
Orders
View(Orders)
View(Orders)
Orders <- cbind(Orders,Da,Month,Year)
View(Orders)
View(Orders)
Orders <- read.csv("Orders.csv",stringsAsFactors = T)
dt1 <- dmy(Orders$Order.Date)
Day <- day(dt1)
Month <- month(dt1)
Year <- year(dt1)
Orders <- cbind(Orders,Day,Month,Year)
View(Orders)
View(Orders)
year(dt1) <- year(dt1)+1
dt1
Orders <- read.csv("Orders.csv",stringsAsFactors = T)
dt1 <- dmy(Orders$Order.Date)
Day <- day(dt1)
Month <- month(dt1)
Year <- year(dt1)
Orders <- cbind(Orders,Day,Month,Year)
str(Orders)
After1Year <- year(dt1)+1
Orders <- cbind(Orders,After1Year )
View(Orders)
View(Orders)
dd=as_tibble(mtcars)
#to install the entire tidyverse do
install.packages("tidyverse")
library(tidyverse)
cars93 <- read.csv("Cars93.csv",stringsAsFactors = T)
str(cars)
arrange(cars93, Price)
a <- arrange(cars93, Price)
View(a)
View(a)
a <- arrange(cars93,Type, Price) #We can provide a third parameter to sort it within the sorted data
View(a)
View(a)
View(a)
View(a)
a <- arrange(cars93, Price)
View(a)
View(a)
a <- arrange(cars93,Type, desc(Price)
View(a)
View(a)
a <- arrange(cars93,Type, desc(Price))
View(a)
View(a)
a <- arrange(cars93,Type, desc(Price))
View(a)
View(a)
sel_cars <- select(cars93, Model, Type, Price)
View(sel_cars)
View(sel_cars)
sel_cars <- select(cars93, Model:Max.Price)
View(sel_cars)
View(sel_cars)
sel_cars <- select(cars93, starts_with("MPG"))
sel_cars <- select(cars93, ends_with("Price"))
#getting cols with regex, starts and ends with
sel_cars <- select(cars93, starts_with("MPG"))
View(sel_cars)
View(sel_cars)
sel_cars <- select(cars93, ends_with("Price"))
View(sel_cars)
View(sel_cars)
sel_cars <- select(cars93, contains("in"))
View(sel_cars)
View(sel_cars)
sel_cars <- select(cars93, Model:Max.Price) #Select a range of columns from Model to Max_price
View(sel_cars)
View(sel_cars)
View(sel_cars)
View(sel_cars)
ss_cars <- filter(cars93, Type=="Compact")
View(ss_cars)
View(ss_cars)
ss_cars <- filter(cars93, Type=="Compact" & Price>20)
View(ss_cars)
View(ss_cars)
ss_cars <- filter(cars93, Type=="Compact" | Price>20)
View(ss_cars)
View(ss_cars)
ss_cars <- filter(cars93, Manufacturer %in% c("Acura","Audi"))
View(ss_cars)
View(ss_cars)
View(ss_cars)
View(ss_cars)
#Like SQL in operator Manufacturer in Audi or Acura, like |
ss_cars <- filter(cars93, Manufacturer %in% c("Ford","Audi"))
View(ss_cars)
View(ss_cars)
#Rename the columns
r_cars <- rename(cars93,Minimum=Min.Price, Maximum=Max.Price)
View(cars93)
View(cars93)
View(r_cars)
View(r_cars)
r_cars <- mutate(cars93, Price_range=Max.Price-Min.Price, Ratio=Weight/Passengers)
View(r_cars)
View(r_cars)
summarise(cars93, avg_price=mean(Price, na.rm=T), sd_price=sd(Price, nar.rm=T))
summarise(cars93, avg_price=mean(Price, na.rm=T))
summarise(cars93, avg_price=mean(Price, na.rm=T), sd_price=sd(Price, na.rm=T))
grp_cars <- group_by(cars93,Type)
summarise(grp_cars, avg_price=mean(Price, na.rm=T), sd_price=sd(Price, na.rm=T))
grp_cars <- group_by(cars93,Type)
View(grp_cars)
ss_cars <- cars93 |> filter( Type=="Compact" & Price>20)
View(ss_cars)
View(ss_cars)
